#! /usr/bin/env python2

from dynamic_reconfigure.parameter_generator_catkin import *

RECONFIGURE_CLOSE = 3 # Parameters that need a sensor to be stopped completely when changed
RECONFIGURE_STOP = 1 # Parameters that need a sensor to stop streaming when changed
RECONFIGURE_RUNNING = 0 # Parameters that can be changed while a sensor is streaming

gen = ParameterGenerator()

#       Name, Type, Reconfiguration level, Description, Default, Min, Max

# gen.add("pub_viz", bool_t, RECONFIGURE_RUNNING,
#         "Convert the source images to several binary images by thresholding the source image with thresholds starting at minThreshold. These thresholds are incremented  by thresholdStep until maxThreshold.",
#         False)

preanalysis = gen.add_group("preanalysis")

preanalysis.add("dsFlag", bool_t, RECONFIGURE_RUNNING,
        "Enable downsampling of input cloud.",
        True)
preanalysis.add("dsResolution", double_t, RECONFIGURE_RUNNING,
        "Downsample resolution, if enabled.",
        0.05, 0.00001, 1.0)
preanalysis.add("neNeighMethod", int_t, RECONFIGURE_RUNNING,
        "Normal estimation method, 0: find N nearest neighbors, 1: find points within distance (very slow)",
        0, 0, 1)
preanalysis.add("neSearchNeighbours", int_t, RECONFIGURE_RUNNING,
        "",
        10, 1, 10000)
preanalysis.add("neSearchRadius", double_t, RECONFIGURE_RUNNING,
        "",
        0.2, 0.001, 100.0)
preanalysis.add("gpFlag", bool_t, RECONFIGURE_RUNNING,
        "Enable filtering of ghost points.",
        True)
preanalysis.add("gpAngle", double_t, RECONFIGURE_RUNNING,
        "Ghost point filtering angle, in degrees, if enabled",
        1.0, 0.0, 90.0)
preanalysis.add("pfActive", bool_t, RECONFIGURE_RUNNING,
        "Enable filtering based on point normal",
        False)
preanalysis.add("pfAngle", double_t, RECONFIGURE_RUNNING,
        "Point normal filtering angle, in degrees, if enabled",
        20.0, 0.0, 90.0)
preanalysis.add("fsActive", bool_t, RECONFIGURE_RUNNING,
        "Enable floor seperation",
        False)
preanalysis.add("fsAngle", double_t, RECONFIGURE_RUNNING,
        "Floor seperation angle, in degrees, if enabled",
        30.0, 0.0, 90.0)
preanalysis.add("fsRange", double_t, RECONFIGURE_RUNNING,
        "Floor seperation distance, in meters, if enabled",
        0.05, 0.0, 1000.0)
preanalysis.add("rob_x", double_t, RECONFIGURE_RUNNING,
        "Position in x of LIDAR relative to frame (req. for floor seperation)",
        0.0, -1000.0, 1000.0)
preanalysis.add("rob_y", double_t, RECONFIGURE_RUNNING,
        "Position in y of LIDAR relative to frame (req. for floor seperation)",
        0.0, -1000.0, 1000.0)
preanalysis.add("rob_z", double_t, RECONFIGURE_RUNNING,
        "Position in z of LIDAR relative to frame (req. for floor seperation)",
        0.0, -1000.0, 1000.0)
preanalysis.add("robAngle", double_t, RECONFIGURE_RUNNING,
        "Rotation around z of LIDAR relative to frame (req. for floor seperation)",
        0.0, 0.0, 360.0)
preanalysis.add("dsMethod", bool_t, RECONFIGURE_RUNNING,
        "Downsampling method, False: standard, True: Experimental",
        False)
preanalysis.add("neMethod", int_t, RECONFIGURE_RUNNING,
        "0: Process ghost point filter and floor seperation in seperate steps",
        0, 0, 1)

gen.add("segmentationmode", int_t, RECONFIGURE_RUNNING,
        "",
        0, 0, 1)

regiongrowing = gen.add_group("region_growing")

regiongrowing.add("enable", bool_t, RECONFIGURE_RUNNING,
        "Enable Region Growing",
        False)
regiongrowing.add("minClustSize", int_t, RECONFIGURE_RUNNING,
        "Minimum cluster size",
        30, 0, 10000)
regiongrowing.add("noNeigh", int_t, RECONFIGURE_RUNNING,
        "Number of neighbors",
        24, 0, 10000)
regiongrowing.add("smoothFlag", bool_t, RECONFIGURE_RUNNING,
        "Smoothness flag (true: compare to seed point, false: compare to neighbor)",
        False)
regiongrowing.add("smoothThresh", double_t, RECONFIGURE_RUNNING,
        "Smoothness threshold",
        50.0, 0.0, 100.0)
regiongrowing.add("resFlag", bool_t, RECONFIGURE_RUNNING,
        "Residual flag (true: compare seed point, false: compare to neighbor)",
        True)
regiongrowing.add("resThresh", double_t, RECONFIGURE_RUNNING,
        "Residual distance",
        0.08, 0.0, 100.0)
regiongrowing.add("curvFlag", bool_t, RECONFIGURE_RUNNING,
        "Curvature flag",
        False)
regiongrowing.add("curvThresh", double_t, RECONFIGURE_RUNNING,
        "Max curvature",
        0.1, 0.0, 100.0)
regiongrowing.add("rgUpdateFlag", bool_t, RECONFIGURE_RUNNING,
        "Update seed point during growing",
        True)
regiongrowing.add("rgPointUpdateFlag", bool_t, RECONFIGURE_RUNNING,
        "Update pointwise",
        True)
regiongrowing.add("updateInterval", int_t, RECONFIGURE_RUNNING,
        "If not pointwise, update every",
        100, 0, 10000)

planeshape = gen.add_group("planeshape")

planeshape.add("angleMargin", double_t, RECONFIGURE_RUNNING,
        "Angle difference allowed to horizontal (treads) or vertical (risers) plane, in degs",
        30.0, 0.0, 100.0)
planeshape.add("widthReqMin", double_t, RECONFIGURE_RUNNING,
        "Width requirement",
        0.0, 0.0, 100.0)
planeshape.add("widthReqMax", double_t, RECONFIGURE_RUNNING,
        "Width requirement",
        10.0, 0.0, 100.0)
planeshape.add("treadDepthMin", double_t, RECONFIGURE_RUNNING,
        "Width requirement",
        0.0, 0.0, 100.0)
planeshape.add("treadDepthMax", double_t, RECONFIGURE_RUNNING,
        "Width requirement",
        50.0, 0.0, 100.0)
planeshape.add("riserHeightMin", double_t, RECONFIGURE_RUNNING,
        "Width requirement",
        0.0, 0.0, 100.0)
planeshape.add("riserHeightMax", double_t, RECONFIGURE_RUNNING,
        "Width requirement",
        0.24, 0.0, 100.0)

recognition = gen.add_group("recognition")

recognition.add("graphMeth", bool_t, RECONFIGURE_RUNNING,
        "graphMeth false for extended search - true for simple search",
        False)
recognition.add("optimizeFlag", bool_t, RECONFIGURE_RUNNING,
        "use least-squared method to optimize parameters as post-processing",
        True)
recognition.add("widthReqVecMin", double_t, RECONFIGURE_RUNNING,
        "Width requirement for the stairs",
        0.0, 0.0, 100.0)
recognition.add("widthReqVecMax", double_t, RECONFIGURE_RUNNING,
        "Width requirement for the stairs",
        10.0, 0.0, 100.0)
recognition.add("widthFlag", bool_t, RECONFIGURE_RUNNING,
        "Stair parts have to overlap in their width",
        True)
recognition.add("parFlag", bool_t, RECONFIGURE_RUNNING,
        "Check the angle between stair parts",
        True)
recognition.add("parAngle", double_t, RECONFIGURE_RUNNING,
        "Check the angle between stair parts, in degs",
        15.0, 0.0, 100.0)
recognition.add("ndFlag", bool_t, RECONFIGURE_RUNNING,
        "Height distances",
        True)
recognition.add("nDistanceMin", double_t, RECONFIGURE_RUNNING,
        "Height distancess",
        0.11, 0.0, 100.0)
recognition.add("nDistanceMax", double_t, RECONFIGURE_RUNNING,
        "Height distances",
        0.24, 0.0, 100.0)
recognition.add("pdFlag", bool_t, RECONFIGURE_RUNNING,
        "Depth distances",
        True)
recognition.add("pDistanceMin", double_t, RECONFIGURE_RUNNING,
        "Depth distancess",
        0.18, 0.0, 100.0)
recognition.add("pDistanceMax", double_t, RECONFIGURE_RUNNING,
        "Depth distances",
        0.50, 0.0, 100.0)
recognition.add("floorInformation", bool_t, RECONFIGURE_RUNNING,
        "true for known floor - false for unknown (floor should be at z = 0.0)",
        False)
recognition.add("recUpdateFlag", bool_t, RECONFIGURE_RUNNING,
        "Update stair coefficients during graph extension - results are suboptimal - not recommended",
        False)
recognition.add("stairRailFlag", bool_t, RECONFIGURE_RUNNING,
        "Extend the rail beyond the detected stairway",
        False)
recognition.add("predifinedValues", bool_t, RECONFIGURE_RUNNING,
        "Set if you want to find stairs with known parameters",
        False)
recognition.add("preDefDepth", double_t, RECONFIGURE_RUNNING,
        "Set if you want to find stairs with known parameters",
        0.0, 0.0, 100.0)
recognition.add("preDefHeight", double_t, RECONFIGURE_RUNNING,
        "Set if you want to find stairs with known parameters",
        0.0, 0.0, 100.0)
recognition.add("preDefWidth", double_t, RECONFIGURE_RUNNING,
        "Set if you want to find stairs with known parameters",
        0.0, 0.0, 100.0)
recognition.add("maxStairRiseDist", double_t, RECONFIGURE_RUNNING,
        "stair distances",
        0.05, 0.0, 100.0)
recognition.add("maxStairRiseHDist", double_t, RECONFIGURE_RUNNING,
        "stair distances",
        0.05, 0.0, 100.0)
recognition.add("maxStairTreadDist", double_t, RECONFIGURE_RUNNING,
        "stair distances",
        0.05, 0.0, 100.0)
recognition.add("maxStairRiseAngle", double_t, RECONFIGURE_RUNNING,
        "stair distances, in deg",
        30.0, 0.0, 100.0)
recognition.add("minStairIncAngle", double_t, RECONFIGURE_RUNNING,
        "filter params, in degs",
        10.0, 0.0, 100.0)
recognition.add("maxStairIncAngle", double_t, RECONFIGURE_RUNNING,
        "filter params, in degs",
        50.0, 0.0, 100.0)

exit(gen.generate('stair_detection', "stair_detection_node", "StairDetection"))
